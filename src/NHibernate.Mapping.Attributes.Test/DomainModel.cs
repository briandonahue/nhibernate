//
// NHibernate.Mapping.Attributes.Test
// This product is under the terms of the GNU Lesser General Public License.
//
using System;
//using System.Collections;
//using System.Collections.Specialized;
using System.Collections;
using System.Data.SqlTypes;

using Iesi.Collections;

using NHibernate.Mapping.Attributes;

using NHMA = NHibernate.Mapping.Attributes;

/*\
 * The mapping used in the following classes has no meaning for NHibernate;
 * it is here for the sole purpose of testing NHibernate.Mapping.Attributes
 * in all possible usage cases.
\*/

namespace NHibernate.Mapping.Attributes.Test.DomainModel
{
	public class Bar
	{
	}

	public class Fee
	{
	}

	public class Foo
	{
	}

	public class FooComponent
	{
	}

	public interface FooProxy
	{
	}

	public class Glarch
	{
	}

	internal class ReverseComparator
	{
	}


	/// <summary>
	/// POJO for Baz
	/// </summary>
	/// <remark>
	/// This class is autogenerated
	/// </remark>
	[Serializable]
	// Set <hibernate-mapping> attributes
	// Note: this attribute is used when you serialize this class (not the assembly)
	[HibernateMapping(-1, DefaultLazy=true, DefaultCascade=CascadeStyle.None, Schema="Schema",
		DefaultAccessType=typeof(int), AutoImport=true, Namespace="NH", Assembly="NH")]
	[Class(DiscriminatorValue="base", NameType=typeof(Baz), Mutable=false, Polymorphism=PolymorphismType.Explicit,
		ProxyType=typeof(Baz), PersisterType=typeof(Baz), BatchSize=9, Check="0", Where="1")]
	public class Baz
	{
		#region NestingComponent + NestedBaz + Discriminator

		[Component(-1, Name="BazComponent", ClassType=typeof(NestingComponent), Update=false, Insert=false,
			AccessType=typeof(int))]
		public struct NestingComponent
		{
		}

		private enum DiscEnum
		{
			Val0,
			Val1
		}

		[Subclass(DiscriminatorValueEnumFormat="d", DiscriminatorValueObject=DiscEnum.Val1, NameType=typeof(NestedBaz),
			ProxyType=typeof(NestedBaz), ExtendsType=typeof(Baz))]
		private class NestedBaz : Baz // Test access to private field (in a private nested class)
		{
			[Array(0, Table="bazcomponents", AccessType=typeof(int), OptimisticLock=true)]
			[Key(1)]
			[Column(2, Name="baz_id", Length=16)]
			[Index(3, Column="i")]
			[CompositeElement(4, ClassType=typeof(FooComponent))]
			[Parent(5, Name="Baz")]
			[Property(6, Name="Name", Length=64, NotNull=false, Unique=false, Update=false, Insert=false, Formula="Formula")]
			[Column(7, Name="name", Length=56)]
			[Type(8, NameType=typeof(bool))]
			[Param(9, Name="Property.Type1")]
			[Param(10, Name="Property.Type2", Content="Content")]
			[Property(11, Name="Count", Column="count_", TypeType=typeof(int))]
			[NestedCompositeElement(12, Name="Subcomponent", ClassType=typeof(FooComponent), AccessType=typeof(int))]
			[Property(13, Name="Name", Column="x_")]
			[Property(14, Name="Count", Column="y_", TypeType=typeof(int))]
			private IList _list;


			[DynamicComponent(AccessType=typeof(Foo))]
// TODO: No longer supported:			[NHMA.ComponentProperty(1, ComponentType=typeof(CompAddress), PropertyName="CompPropAddress")]
			[DynamicComponent(7, Name="NestedDynComponent", Update=false, Insert=false, AccessType=typeof(int))]
			[Property(8)]
// When ComponentProperty was a BaseAttribute: TODO: Not supported: (will be used by both [DynComp])
//			[NHMA.ComponentProperty(9, ComponentType=typeof(CompAddress), PropertyName="LastAddress")]
				public IList List
			{
				get { return _list; }
				set { _list = value; }
			}

			[ComponentProperty] // Auto-detection :)
				public CompAddress MyAutoCompAddress
			{
				get { return null; }
				set { }
			}

			[Loader(QueryRef="queryRef")]
			[SqlInsert(1, Content="C")]
			[SqlUpdate(2, Content="U")]
			[SqlDelete(3, Content="D")]
			public int sql = 1;
		}

		#endregion

		#region Fields

		private NestingComponent _collectionComponent;
		private String _code;
		private FooComponent[] _components;
		private DateTime[] _timeArray;
		private string[] _stringArray;
		private int[] _intArray;
		private FooProxy[] _fooArray;
		private Int32 _count;
		private String _name;
		private Foo _foo;
		private IList _stringList;
		private IList _fees;
		private IList _customs;
		private IList _topComponents;
		private IDictionary _fooToGlarch;
		private IDictionary _fooComponentToFoo;
		private IDictionary _glarchToFoo;
		private IDictionary _stringDateMap;
		private IDictionary _topGlarchez;
		private IDictionary _cachedMap;
		private IDictionary _stringGlarchMap;
		private IDictionary _anyToAny;
		private IList _manyToAny;
		private ISet _fooSet;
		private ISet _stringSet;
		private ISet _topFoos;
		private ISet _cascadingBars;
		private ISet _cached;
		private ISet _sortablez;
		private IList _bag;
		private IList _fooBag;
		private IList _idFooBag;
		private IList _byteBag;
		private IList _bazez;

		#endregion

		#region Constructors

		/// <summary>
		/// Default constructor for class Baz
		/// </summary>
		public Baz()
		{
		}

		#endregion

		#region Properties

		/// <summary>
		/// Gets or sets the _collectionComponent
		/// </summary> 
		[ManyToOne(NotNull=true, Lazy=Laziness.False, NotFound=NotFoundMode.Ignore, ClassType=typeof(int),
			AccessType=typeof(Foo), Fetch=FetchMode.Select, OuterJoin=OuterJoinStrategy.True)]
		public NestingComponent CollectionComponent
		{
			get { return _collectionComponent; }
			set { _collectionComponent = value; }
		}

		/// <summary>
		/// Get/set for Code
		/// </summary>
		[Id(-4, Name="Code", TypeType=typeof(string), Access="field.camelcase-underscore", AccessType=typeof(int), Column="Id"
			, Length=8, UnsavedValueObject="null")]
		[Column(-3, Name="baz_id", Length=32)]
		[Generator(-2, Class="uuid.hex")]
		[Param(-1, Name="property", Content="Y")]
		[Param(Name="Unknow")] // Default to 0 :)
		[Discriminator(1, Column="clazz_discriminator", Formula="1==2", TypeType=typeof(string), NotNull=true, Length=256,
			Force=true, Insert=false)]
		public String Code
		{
			get { return this._code; }
			set { this._code = value; }
		}

		/// <summary>
		/// Get/set for count
		/// </summary>
		[Version(Column="count_count", Name="Count", UnsavedValueObject=0, AccessType=typeof(int), TypeType=typeof(int))]
		public Int32 Count
		{
			get { return this._count; }
			set { this._count = value; }
		}

		/// <summary>
		/// Get/set for name
		/// </summary>
		[Property(Column="name_b")]
		public String Name
		{
			get { return this._name; }
			set { this._name = value; }
		}

		/// <summary>
		/// Get/set for Foo
		/// </summary>
		[ManyToOne(0, Name="Foo", Column="F", Lazy=Laziness.Proxy, Update=false, Insert=true, PropertyRef="0",
			AccessType=typeof(int), ClassType=typeof(Foo), Fetch=FetchMode.Join, OuterJoin=OuterJoinStrategy.True)]
		public Foo Foo
		{
			get { return this._foo; }
			set { this._foo = value; }
		}

		/// <summary>
		/// Get/set for stringList
		/// </summary>
		[List(0, Generic=false, Table="string_list", BatchSize=7, Check="Check", AccessType=typeof(int),
			PersisterType=typeof(Foo))]
		[Key(1)]
		[Column(2, Name="id", Length=16)]
		[Index(3, Column="`i`")]
		[Element(4, Column="element", TypeType=typeof(NestedBaz))]
		public IList StringList
		{
			get { return this._stringList; }
			set { this._stringList = value; }
		}

		/// <summary>
		/// Get/set for fees
		/// </summary>
		[List(0, Lazy=true, Cascade=CascadeStyle.All, Name="List", AccessType=typeof(Foo), OuterJoin=OuterJoinStrategy.True)]
		[Key(1, Column="bazid")]
		[Index(2, Column="bazind")]
		[OneToMany(3, NotFound=NotFoundMode.Exception, ClassType=typeof(Fee))]
		public IList Fees
		{
			get { return _fees; }
			set { _fees = value; }
		}

		/// <summary>
		/// Get/set for customs
		/// </summary>
		[List(OptimisticLock=true)]
		[Key(1, Column="id_")]
		[Index(2, Column="indx")]
		[Element(3, TypeType=typeof(double))]
		[Column(4, Name="first_")]
		[Column(5, Name="second_")]
		public IList Customs
		{
			get { return this._customs; }
			set { this._customs = value; }
		}

		/// <summary>
		/// Get/set for topComponents
		/// </summary>
		[List(0, Table="topcomponents", Schema="Schema", Where="0", Inverse=false, Fetch=CollectionFetchMode.Select,
			PersisterType=typeof(int))]
		[Cache(1, Region="kmer", Usage=CacheUsage.ReadWrite)]
		[Key(2, Column="id_")]
		[Index(3, Column="i")]
		[CompositeElement(4, ClassType=typeof(FooComponent))]
		[Property(5, Name="Name")]
		[Property(6, Name="Count", Column="count_", TypeType=typeof(int))]
		public IList TopComponents
		{
			get { return this._topComponents; }
			set { this._topComponents = value; }
		}

		/// <summary>
		/// Get/set for fooToGlarch
		/// </summary>
		[Map(0, Generic=false)]
		[Key(1)]
		[Column(2, Name="baz_id", Length=16)]
		[IndexManyToMany(3, Column="foo_id", ClassType=typeof(Foo))]
		[ManyToMany(4, Column="glarch_id", ClassType=typeof(Glarch), Lazy=RestrictedLaziness.Proxy, Where="0==0",
			OuterJoin=OuterJoinStrategy.Auto)]
		public IDictionary FooToGlarch
		{
			get { return this._fooToGlarch; }
			set { this._fooToGlarch = value; }
		}

		/// <summary>
		/// Get/set for fooComponentToFoo
		/// </summary>
		[Map(OptimisticLock=true)]
		[JcsCache(1, Region="togs", Usage=JcsCacheUsage.ReadWrite)]
		[Key(2)]
		[Column(3, Name="baz_id", Length=16)]
		[CompositeIndex(4, ClassType=typeof(FooComponent))]
		[KeyProperty(5, Name="Name", Length=32, Access="field.camelcase-underscore")]
		[KeyProperty(6, Name="Count", Column="count_", AccessType=typeof(Foo), TypeType=typeof(int))]
		[ManyToMany(7, Column="foo_id", ClassType=typeof(Foo), OuterJoin=OuterJoinStrategy.True)]
		public IDictionary FooComponentToFoo
		{
			get { return this._fooComponentToFoo; }
			set { this._fooComponentToFoo = value; }
		}

		/// <summary>
		/// Get/set for glarchToFoo
		/// </summary>
		[Map(Name="GTF", AccessType=typeof(int), Schema="Schema", Inverse=false, Fetch=CollectionFetchMode.Subselect,
			PersisterType=typeof(Foo))]
		[Key(1)]
		[Column(2, Name="gtf_baz_id", Length=16)]
		[IndexManyToMany(3, Column="gtf_foo_id", ClassType=typeof(string), ForeignKey="FK")]
		[OneToMany(4, ClassType=typeof(Glarch))]
		public IDictionary GlarchToFoo
		{
			get { return this._glarchToFoo; }
			set { this._glarchToFoo = value; }
		}

		/// <summary>
		/// Get/set for stringDateMap
		/// </summary>
		[Map(-3, Lazy=true, SortType=typeof(ReverseComparator), AccessType=typeof(Foo), PersisterType=typeof(int))]
		[Key(-2, Column="id_")]
		[Index(-1, Column="map_key", TypeType=typeof(Foo), Length=32)]
		[Element(Column="map_value", TypeType=typeof(DateTime), Length=9, Unique=false)]
		public IDictionary StringDateMap
		{
			get { return this._stringDateMap; }
			set { this._stringDateMap = value; }
		}

		/// <summary>
		/// Get/set for topGlarchez
		/// </summary>
		[Map(BatchSize=9, Check="0", OrderBy="1", SortType=typeof(int))]
		[Key(1, Column="idtopglarch")]
		[Index(2, Column="mapkey", TypeType=typeof(char), Length=1)]
		[OneToMany(3, ClassType=typeof(Glarch))]
		public IDictionary TopGlarchez
		{
			get { return this._topGlarchez; }
			set { this._topGlarchez = value; }
		}

		/// <summary>
		/// Get/set for cachedMap
		/// </summary>
		[Map(0, Sort="natural", Table="cached_map")]
		[Cache(1, Usage=CacheUsage.ReadWrite)]
		[Key(2, Column="baz")]
		[IndexManyToMany(3, Column="another_baz", ClassType=typeof(Baz))]
		[CompositeElement(4, ClassType=typeof(FooComponent))]
		[Property(5, Name="Foo")]
		[Property(6, Name="Bar")]
		public IDictionary CachedMap
		{
			get { return this._cachedMap; }
			set { this._cachedMap = value; }
		}

		/// <summary>
		/// Get/set for stringGlarchMap
		/// </summary>
		[Map(0, Where="baz_map_index &gt; 'a' and tha_key is not null", Cascade=CascadeStyle.All)]
		[JcsCache(1, Usage=JcsCacheUsage.ReadWrite)]
		[Key(2, Column="baz")]
		[IndexManyToMany(3, Column="another_baz", ClassType=typeof(Baz))]
		[CompositeElement(4, ClassType=typeof(FooComponent))]
		[Property(5, Name="Foo")]
		[Property(6, Name="Bar")]
		public IDictionary StringGlarchMap
		{
			get { return this._stringGlarchMap; }
			set { this._stringGlarchMap = value; }
		}

		/// <summary>
		/// Get/set for anyToAny
		/// </summary>
		[Map(-5, Lazy=true)]
		[Key(-4, Column="baz")]
		[IndexManyToAny(-3, IdTypeType=typeof(Int64), MetaTypeType=typeof(int))]
		[Column(-2, Name="ind_id_")]
		[ManyToAny(-1, IdTypeType=typeof(Int64), MetaTypeType=typeof(NestingComponent))]
		[MetaValue(Value="meta-value", ClassType=typeof(Guid))]
		[Column(1, Name="el_clazz_")]
		public IDictionary AnyToAny
		{
			get { return this._anyToAny; }
			set { this._anyToAny = value; }
		}

		/// <summary>
		/// Get/set for manyToAny
		/// </summary>
		[List(0, Lazy=true, CollectionTypeType=typeof(ArrayList))]
		[Key(1, Column="baz")]
		[Index(2, Column="ind")]
		[ManyToAny(3, IdTypeType=typeof(string))]
		[Column(4, Name="el_clazz_")]
		[Column(5, Name="el_id_")]
		public IList ManyToAny
		{
			get { return this._manyToAny; }
			set { this._manyToAny = value; }
		}

		/// <summary>
		/// Gets or sets the intArray
		/// </summary> 
		[PrimitiveArray(0, Table="int_array", AccessType=typeof(int), Schema="Schema", Where="0")]
		[Key(1)]
		[Column(2, Name="id", Length=16)]
		[Index(3, Column="i")]
		[Element(4, Column="j", TypeType=typeof(int))]
		public int[] IntArray
		{
			get { return _intArray; }
			set { _intArray = value; }
		}

		/// <summary>
		/// Gets or sets the _components
		/// </summary> 
		[Array(0, Table="bazcomponents", Access="unknow")]
		[Key(1)]
		[Column(2, Name="baz_id", Length=16)]
		[Index(3, Column="i")]
		[CompositeElement(4, ClassType=typeof(FooComponent))]
		[Parent(5, Name="Baz")]
		[Property(6, Name="Name")]
		[Column(7, Name="name", Length=56)]
		[Property(8, Name="Count", Column="count_", TypeType=typeof(int))]
		[NestedCompositeElement(9, Name="Subcomponent", ClassType=typeof(int), AccessType=typeof(Foo))]
		[Property(10, Name="Name", Column="x_", AccessType=typeof(int))]
		[Property(11, Name="Count", Column="y_", TypeType=typeof(Baz), AccessType=typeof(Baz))]
		public FooComponent[] Components
		{
			get { return _components; }
			set { _components = value; }
		}

		/// <summary>
		/// Gets or sets the timeArray
		/// </summary> 
		[Array(Name="TimeArray", Schema="Schema", ElementClass="ElementClass", Cascade=CascadeStyle.None, Where="1=1")]
		[Key(1)]
		[Column(2, Name="baz_id", Length=16)]
		[Index(3, Column="j")]
		[Element(4, Column="the_time", TypeType=typeof(DateTime))]
		public DateTime[] TimeArray
		{
			get { return _timeArray; }
			set { _timeArray = value; }
		}

		/// <summary>
		/// Gets or sets the stringArray
		/// </summary> 
		[Any(Name="StringArray", Insert=true, Update=true, Index="null", IdTypeType=typeof(Foo), AccessType=typeof(Baz),
			MetaTypeType=typeof(int))]
		[MetaValue(1, Value="val2", ClassType=typeof(int))]
		[Column(2, Name="clazz")]
		public string[] StringArray
		{
			get { return _stringArray; }
			set { _stringArray = value; }
		}


		/// <summary>
		/// Gets or sets the fooArray
		/// </summary> 
		public FooProxy[] FooArray
		{
			get { return _fooArray; }
			set { _fooArray = value; }
		}


		/// <summary>
		/// Get/set for fooSet
		/// </summary>
		public ISet FooSet
		{
			get { return this._fooSet; }
			set { this._fooSet = value; }
		}

		/// <summary>
		/// Get/set for stringSet
		/// </summary>
		public ISet StringSet
		{
			get { return this._stringSet; }
			set { this._stringSet = value; }
		}

		/// <summary>
		/// Get/set for topFoos
		/// </summary>
		public ISet TopFoos
		{
			get { return this._topFoos; }
			set { this._topFoos = value; }
		}

		/// <summary>
		/// Get/set for cascadingBars
		/// </summary>
		public ISet CascadingBars
		{
			get { return this._cascadingBars; }
			set { this._cascadingBars = value; }
		}

		/// <summary>
		/// Get/set for cached
		/// </summary>
		public ISet Cached
		{
			get { return this._cached; }
			set { this._cached = value; }
		}

		/// <summary>
		/// Get/set for sortablez
		/// </summary>
		public ISet Sortablez
		{
			get { return this._sortablez; }
			set { this._sortablez = value; }
		}

		/// <summary>
		/// Get/set for bag
		/// </summary>
		[Bag(-2, Name="Bag", OptimisticLock=true, Generic=false, OrderBy="x", Where="1", Lazy=true, Check="0",
			AccessType=typeof(Foo), PersisterType=typeof(string), Cascade=CascadeStyle.All)]
		[Key(-1, Column="baz")]
		[Column(Name="`baz_id@#$`", NotNull=true, Unique=false, UniqueKey="1")]
		[Element(1, Column="`name!`", TypeType=typeof(string))]
		public IList Bag
		{
			get { return this._bag; }
			set { this._bag = value; }
		}

		/// <summary>
		/// Get/set for fooBag
		/// </summary>
		[Bag(Name="Bag", AccessType=typeof(int), Schema="Schema", Inverse=false, BatchSize=9, PersisterType=typeof(Foo),
			OuterJoin=OuterJoinStrategy.True)]
		[Key(1, ForeignKey="baz")]
		[Column(2, Name="`baz_id@#$`", SqlType="0", Index="0", Check="1")]
		[Element(3, Column="`name!`", TypeType=typeof(string))]
		public IList FooBag
		{
			get { return this._fooBag; }
			set { this._fooBag = value; }
		}

		/// <summary>
		/// Get/set for bazez
		/// </summary>
		[Set(Name="Bazez", AccessType=typeof(Foo), Table="SetTable", Schema="Schema", Lazy=true, Check="0", OrderBy="1",
			BatchSize=3, Fetch=CollectionFetchMode.Join, PersisterType=typeof(int), SortType=typeof(Foo))]
		[Key(1, Column="col")]
		[OneToMany(2, ClassType=typeof(int))]
		public IList Bazez
		{
			get { return this._bazez; }
			set { this._bazez = value; }
		}

		/// <summary>
		/// Get/set for idFooBag
		/// </summary>
		[IdBag(0, Name="IdFooBag", Lazy=true, Generic=false, CollectionTypeType=typeof(bool), Table="baz_id_foo",
			Cascade=CascadeStyle.All, AccessType=typeof(int), Schema="null", OrderBy="1", Where="1")]
		[CollectionId(1, Column="pkid", TypeType=typeof(Int64), Length=8)]
		[Generator(2, Class="hilo")]
		[Key(3, Column="baz")]
		[ManyToMany(4, NotFound=NotFoundMode.Exception, ClassType=typeof(Foo), Column="the_time", Fetch=FetchMode.Select,
			OuterJoin=OuterJoinStrategy.False)]
		public IList IdFooBag
		{
			get { return this._idFooBag; }
			set { this._idFooBag = value; }
		}

		/// <summary>
		/// Get/set for byteBag
		/// </summary>
		[IdBag(0, Lazy=true, Inverse=true, Table="baz_byte_bag", Cascade=CascadeStyle.All, OptimisticLock=true)]
		[CollectionId(1, Column="pkid", TypeType=typeof(Int64))]
		[Generator(2, Class="hilo")]
		[Key(3, Column="baz")]
		[Element(4, TypeType=typeof(byte[]), Column="bytez", NotNull=true)]
		public IList ByteBag
		{
			get { return this._byteBag; }
			set { this._byteBag = value; }
		}

		#endregion
	}

	#region Shared components Address & CompAddress

	public class Address
	{
		[Property]
		public string Name
		{
			get { return null; }
			set { }
		}

		[Property(Column="{{City.Column}}")]
		[AttributeIdentifier("City.Column", ValueFormat="x", ValueObject=DayOfWeek.Wednesday)] // Default value
			public string City
		{
			get { return null; }
			set { }
		}
	}

	[Component]
	public class CompAddress
	{
		[Property]
		public string FullName
		{
			get { return null; }
			set { }
		}

		[Property]
		public string POBox
		{
			get { return null; }
			set { }
		}
	}

	#endregion

	#region class JoinedBaz

	[JoinedSubclass(NameType=typeof(JoinedBaz), ProxyType=typeof(JoinedBaz), ExtendsType=typeof(Baz),
		SelectBeforeUpdate=true)]
	[Key(Column="JoinedId")]
	internal class JoinedBaz : Baz
	{
		private FooProxy _reverse;
		private object _object;

		[OneToOne(1, Name="Reverse", ClassType=typeof(FooProxy), Lazy=Laziness.False, AccessType=typeof(Foo), ForeignKey="FK",
			Fetch=FetchMode.Join, Cascade=CascadeStyle.SaveUpdate)]
		[Meta(2, Attribute="OneToOne Meta", Inherit=false)]
		[OneToOne(3, ClassType=typeof(int), Lazy=Laziness.Proxy, AccessType=typeof(int), PropertyRef="TWO",
			OuterJoin=OuterJoinStrategy.Auto, Constrained=true)]
		[Meta(4, Attribute="OneToOne Meta TWO")]
		public virtual FooProxy Reverse
		{
			get { return _reverse; }
			set { _reverse = value; }
		}


		[Meta(-2, Attribute="Meta", Content="Content")]
		[Any(-1, IdTypeType=typeof(Int64), Cascade=CascadeStyle.All, AccessType=typeof(int), MetaTypeType=typeof(Baz))]
		[MetaValue(Value="val1", ClassType=typeof(Foo))]
		[Column(1, Name="clazz", Length=200)]
		public object Object
		{
			get { return _object; }
			set { _object = value; }
		}


		[Component(Name = "MyAddress")]
		protected class SubAddress : Address
		{
		}

		public Address MyAddress
		{
			get { return null; }
			set { }
		}

		[ComponentProperty] // Auto-detection :)
			public CompAddress MyAutoCompAddress
		{
			get { return null; }
			set { }
		}

		[DynamicComponent]
		[Property(1, Name="DynProp")]
		public string MyDynCompAddress2
		{
			get { return null; }
			set { }
		}

		[Loader(QueryRef="ref")]
		[SqlInsert(1, Content="INSERT")]
		[SqlUpdate(2, Content="UPDATE")]
		[SqlDelete(3, Content="DELETE")]
		public int sql = 2;
	}

	#endregion

	#region class Stuff

	[Class(-1, NameType=typeof(int), Table="Stuff", DiscriminatorValueEnumFormat="none", DiscriminatorValueObject=7,
		Schema="none", Lazy=true, DynamicUpdate=false, DynamicInsert=false, SelectBeforeUpdate=true,
		OptimisticLock=OptimisticLockMode.None, ProxyType=typeof(bool), PersisterType=typeof(string))]
	[JcsCache(Usage=JcsCacheUsage.NonStrictReadWrite)]
	public class Stuff
	{
		private long _id;
		private Foo _foo;
		private DateTime _timestamp;
		private ISet _set;


		[Meta(Attribute="ClassName", Content="Stuff :)")]
		[CompositeId(1, Name="ID", ClassType=typeof(long), AccessType=typeof(int), UnsavedValue=UnsavedValueType.Any)]
		[KeyProperty(2, Name="Id", AccessType=typeof(int), TypeType=typeof(Foo))]
		[KeyManyToOne(3, Name="Foo", ClassType=typeof(Foo), Lazy=RestrictedLaziness.False, AccessType=typeof(int), Column="-",
			ForeignKey="x")]
		[KeyManyToOne(4, Name="Bar", ClassType=typeof(int), Lazy=RestrictedLaziness.Proxy, AccessType=typeof(Bar))]
		public long Id
		{
			get { return _id; }
			set { _id = value; }
		}

		[Property(-1, OptimisticLock=true)]
		[Type(NameType=typeof(Foo))]
		[Param(1, Name="Property.Type", Content="Param")]
		public Foo Foo
		{
			get { return _foo; }
			set { _foo = value; }
		}

		[Timestamp(0, Column="`timestamp`", UnsavedValueObject=true, AccessType=typeof(bool))]
		public DateTime Timestamp
		{
			get { return _timestamp; }
			set { _timestamp = value; }
		}

		[Set(-2, Generic=true, Inverse=true, OptimisticLock=true, CollectionTypeType=typeof(Stuff), Cascade=CascadeStyle.All,
			OuterJoin=OuterJoinStrategy.True, AccessType=typeof(bool), Where="1=1", PersisterType=typeof(Foo),
			SortType=typeof(bool))]
		[Key(-1, Column="col")]
		[OneToMany(ClassType=typeof(int))]
		public ISet Set
		{
			get { return _set; }
			set { _set = value; }
		}


		[Component(Name="HomeAddress")]
		[AttributeIdentifier("City.Column", Value="HomeCity")]
		protected class HomeAddressMapping : Address
		{
		}

		public Address HomeAddress
		{
			get { return null; }
			set { }
		}

		[Component(Name="StuffAddress", ClassType=typeof(int), AccessType=typeof(Foo))]
		protected class SubAddress : Address
		{
		}

		public Address StuffAddress
		{
			get { return null; }
			set { }
		}

		[ComponentProperty(ComponentType=typeof(CompAddress), PropertyName="MyCompAddressTwo")]
		public string MyCompAddress2
		{
			get { return null; }
			set { }
		}
	}

	#endregion

	#region interface Sql

	[Class]
	[Cache(Usage=CacheUsage.NonStrictReadWrite)]
	[Discriminator]
	public interface Sql
	{
		[Id(-1)]
		[Generator(Class="?")]
		long id { get; }

		[Loader(QueryRef="ref")]
		[SqlInsert(1, Check=CustomSqlCheck.None, Content="INSERT INTO Table (Col1, Col2) VALUES ( UPPER(?), ? )")]
		[SqlUpdate(2, Check=CustomSqlCheck.None, Content="UPDATE Table SET Col1=UPPER(?) WHERE Id=?")]
		[SqlDelete(3, Check=CustomSqlCheck.RowCount, Content="DELETE FROM Table WHERE Id=?")]
		int sql { get; }

		[Filter(Name="Null", Condition="1==2")]
		int filter { get; }
	}

	#endregion
}

#region Subclasses & JoinedSubclasses to test HbmSerializer.MapSubclasses() and classes nesting

/* Disabled because the original order (determined by the compiler) may vary and influence the final result

public class S
{
	[NHMA.Subclass(ExtendsType=typeof(Sub_Sub_SubA_1))]
	private class Sub_Sub_Sub_SubA_1 : Sub_Sub_SubA_1 {}
	[NHMA.Subclass(ExtendsType=typeof(SubA_1))]
	private class Sub_SubA_1 : SubA_1 {}
	[NHMA.Subclass(ExtendsType=typeof(SubA_2))]
	private class Sub_Sub_A_2 : SubA_2 {}
	[NHMA.Subclass(ExtendsType=typeof(Sub_SubA_1))]
	private class Sub_Sub_SubA_1 : Sub_SubA_1 {}
	[NHMA.Subclass(ExtendsType=typeof(A))]
	private class SubA_2 : A {}
	[NHMA.Subclass(ExtendsType=typeof(A))]
	private class SubA_1 : A {}
	[NHMA.Subclass(ExtendsType=typeof(Guid))]
	private class A {}
}

class JS
{
	[NHMA.JoinedSubclass(ExtendsType=typeof(Sub_Sub_SubA_1))]
	private class Sub_Sub_Sub_SubA_1 : Sub_Sub_SubA_1 {}
	[NHMA.JoinedSubclass(ExtendsType=typeof(SubA_1))]
	private class Sub_SubA_1 : SubA_1 {}
	[NHMA.JoinedSubclass(ExtendsType=typeof(SubA_2))]
	internal class Sub_Sub_A_2 : SubA_2 {}
	[NHMA.JoinedSubclass(ExtendsType=typeof(Sub_SubA_1))]
	private class Sub_Sub_SubA_1 : Sub_SubA_1 {}
	[NHMA.JoinedSubclass(ExtendsType=typeof(A))]
	internal class SubA_2 : A {}
	[NHMA.JoinedSubclass(ExtendsType=typeof(A))]
	private class SubA_1 : A {}
	[NHMA.JoinedSubclass(ExtendsType=typeof(Guid))]
	internal class A {}
}/**/


// Test mapping of nested classes
internal class X
{
	[Subclass(ExtendsType=typeof(Guid))]
	private class PrivS
	{
		[Class]
		private class PrivC
		{
			[Subclass(ExtendsType=typeof(Guid))]
			internal class IntS : PrivS
			{
				[Component(Name="CompX")]
				private class Comp
				{
				}

				[Class]
				internal class IntC : PrivC
				{
					[Id]
					[Generator(1, Class="")]
					[RawXml(After=typeof(IdAttribute), Content=@"<version name="""" />")]
					public int _id = -1;
				}
			}

			[RawXml(Content=@"
    <id>
      <generator class="""" />
    </id>")]
			public int id = -1;
		}

		[JoinedSubclass(ExtendsType=typeof(Guid))]
		private class PrivJ
		{
			private class C
			{
				[JoinedSubclass(ExtendsType=typeof(Guid))]
				internal class IntJ : PrivJ
				{
					[Key]
					public int _id = -1;
				}
			}

			[Key(-1)]
			[Property] // Test HbmWriter.Patterns
				public PrivC userPattern = new PrivC();

			[Property] // Test HbmWriter.Patterns
				public SqlDateTime sqlPattern = new SqlDateTime();
		}
	}
}

/**/

#endregion