//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: $runtimeversion
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

${classimports}
${javaTool.getPackageDeclaration($clazz)}
{

#if($clazz.hasMeta("class-description"))
 /// <summary>
 $javaTool.toJavaDoc($clazz.getMetaAsString("class-description"),0)
 /// </summary>
#else
 /// <summary>
 /// POJO for $clazz.generatedName
 /// </summary>
 /// <remark>
 /// This class is autogenerated
 /// </remark>
#end
$clazz.modifiers $clazz.scope $clazz.declarationType $clazz.generatedName#if(($javaTool.hasExtends($clazz))||($javaTool.hasImplements($clazz))) : #end$javaTool.getExtends($clazz)#if(($javaTool.hasExtends($clazz))&&($javaTool.hasImplements($clazz))), #end$javaTool.getImplements($clazz)
 {

#if(!$clazz.isInterface())
	#region Fields
#foreach($field in $clazz.Fields())  
	/// <summary>
	/// Holder for $field.fieldName
	/// </summary>
	$field.FieldScope() $javaTool.getTrueTypeName($field, $class2classmap) $field.fieldName;
	
#end
	#endregion

	#region Constructors
#if($clazz.AllFieldsForFullConstructor().Count>0)
	/// <summary>
	/// Default constructor for class ${clazz.generatedName}
	/// </summary>
	public ${clazz.generatedName}()
	{
	}
#end
	
	/// <summary>
	/// Constructor for class ${clazz.generatedName}
	/// </summary>
#foreach($field in $clazz.AllFieldsForFullConstructor())  
	/// <param name="${field.fieldName}">Initial ${field.fieldName} value</param>
#end
	public ${clazz.generatedName}($javaTool.fieldsAsParameters($clazz.AllFieldsForFullConstructor(),$clazz,$class2classmap))
#if(!$clazz.FieldsForSupersFullConstructor().isEmpty()) 
		: base($javaTool.fieldsAsArguments($clazz.FieldsForSupersFullConstructor(),$clazz,$class2classmap))
#end
	{
#foreach($field in $clazz.LocalFieldsForFullConstructor())  
		this.$field.fieldName = $field.fieldName;
#end
	}
	
#if(($clazz.AllFieldsForFullConstructor().Count > 0) && $clazz.needsMinimalConstructor())
	/// <summary>
	/// Minimal constructor for class ${clazz.generatedName}
	/// </summary>
#foreach($field in $clazz.AllFieldsForMinimalConstructor())  
	/// <param name="${field.fieldName}">Initial ${field.fieldName} value</param>
#end
	public ${clazz.generatedName}($javaTool.fieldsAsParameters($clazz.AllFieldsForMinimalConstructor(),$clazz,$class2classmap))
#if(!${clazz.FieldsForSupersMinimalConstructor().isEmpty()}) 
		: base($javaTool.fieldsAsArguments($clazz.FieldsForSupersMinimalConstructor(),$clazz,$class2classmap))
#end
	{
#foreach($field in $clazz.LocalFieldsForMinimalConstructor())  
		this.$field.fieldName = $field.fieldName;
#end
	}
#end
	#endregion
	
	#region Properties
#foreach($field in $clazz.Fields())
#if($property.hasMeta("field-description"))
	///
	$javaTool.toJavaDoc($clazz.getMetaAsString("field-description"),4)
	///
#else
	/// <summary>
	/// Get/set for ${field.fieldName}
	/// </summary>
#end
	$field.PropertyGetScope() ${javaTool.getTrueTypeName($field, $class2classmap)} $field.fieldName
	{
		get
		{
			return this.$field.fieldName;
		}
		set
		{
			this.$field.fieldName = value;
		}
	}
	
#end
	#endregion
#else
	#region Properties
#foreach($field in $clazz.getFields())
#if($property.hasMeta("field-description"))
	///
	$javaTool.toJavaDoc($clazz.getMetaAsString("field-description"),4)
	///
#else
	/// <summary>
	/// Get/set for ${field.fieldName}
	/// </summary>
#end
	$field.PropertyGetScope() ${javaTool.getTrueTypeName($field, $class2classmap)} $field.fieldName
	{
		get;
		set;
	}
	
#end
	#endregion
#end
 }
}