using System.Data;
using System.Text;
using NHibernate.Cfg;
using NHibernate.SqlCommand;
using NHibernate.SqlTypes;

namespace NHibernate.Dialect
{
	/// <summary>
	/// An SQL dialect for DB2.
	/// </summary>
	/// <remarks>
	/// The DB2Dialect defaults the following configuration properties:
	/// <list type="table">
	///		<listheader>
	///			<term>Property</term>
	///			<description>Default Value</description>
	///		</listheader>
	///		<item>
	///			<term>hibernate.use_outer_join</term>
	///			<description><c>true</c></description>
	///		</item>
	///		<item>
	///			<term>hibernate.connection.driver_class</term>
	///			<description><see cref="NHibernate.Driver.DB2Driver" /></description>
	///		</item>
	/// </list>
	/// </remarks>
	public class DB2Dialect : Dialect
	{
		/// <summary></summary>
		public DB2Dialect()
		{
			Register( DbType.AnsiStringFixedLength, "CHAR(254)" );
			Register( DbType.AnsiStringFixedLength, 254, "CHAR($1)" );
			Register( DbType.AnsiString, "VARCHAR(254)" );
			Register( DbType.AnsiString, 8000, "VARCHAR($1)" );
			Register( DbType.AnsiString, 2147483647, "CLOB" );
			Register( DbType.Binary, 2147483647, "BLOB" );
			Register( DbType.Boolean, "SMALLINT" );
			Register( DbType.Byte, "SMALLINT" );
			Register( DbType.Currency, "DECIMAL(16,4)" );
			Register( DbType.Date, "DATE" );
			Register( DbType.DateTime, "TIMESTAMP" );
			Register( DbType.Decimal, "DECIMAL(19,5)" );
			Register( DbType.Decimal, 19, "DECIMAL(19, $1)" );
			Register( DbType.Double, "DOUBLE" );
			Register( DbType.Int16, "SMALLINT" );
			Register( DbType.Int32, "INTEGER" );
			Register( DbType.Int64, "BIGINT" );
			Register( DbType.Single, "REAL" );
			Register( DbType.StringFixedLength, "CHAR(254)" );
			Register( DbType.StringFixedLength, 254, "CHAR($1)" );
			Register( DbType.String, "VARCHAR(254)" );
			Register( DbType.String, 8000, "VARCHAR($1)" );
			Register( DbType.String, 2147483647, "CLOB" );
			Register( DbType.Time, "TIME" );

			DefaultProperties[ Environment.OuterJoin ] = "true";
			DefaultProperties[ Environment.ConnectionDriver ] = "NHibernate.Driver.DB2Driver";
		}

		/// <summary></summary>
		public override string AddColumnString
		{
			get { return "add column"; }
		}

		/// <summary></summary>
		public override bool DropConstraints
		{
			get { return false; }
		}

		/// <summary></summary>
		public override bool SupportsIdentityColumns
		{
			get { return true; }
		}

		/// <summary></summary>
		public override string IdentitySelectString
		{
			get { return "values IDENTITY_VAL_LOCAL()"; }
		}

		/// <summary></summary>
		public override string IdentityColumnString
		{
			get { return "not null generated by default as identity"; }
		}

		/// <summary></summary>
		public override string IdentityInsertString
		{
			get { return "default"; }
		}

		/// <summary></summary>
		public override string GetSequenceNextValString( string sequenceName )
		{
			return "values nextval for " + sequenceName;
		}

		/// <summary></summary>
		public override string GetCreateSequenceString( string sequenceName )
		{
			return "create sequence " + sequenceName;
		}

		/// <summary></summary>
		public override string GetDropSequenceString( string sequenceName )
		{
			return string.Concat( "drop sequence ", sequenceName, " restrict" );
		}

		/// <summary></summary>
		public override bool SupportsSequences
		{
			get { return true; }
		}

		/// <summary></summary>
		public override bool SupportsLimit
		{
			get { return true; }
		}

		/// <summary></summary>
		public override bool BindLimitParametersInReverseOrder
		{
			get { return false; }
		}

		/// <summary></summary>
		public override bool UseMaxForLimit
		{
			get { return true; }
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="querySqlString"></param>
		/// <returns></returns>
		public override SqlString GetLimitString( SqlString querySqlString )
		{
			Parameter p1 = new Parameter();
			Parameter p2 = new Parameter();
			p1.Name = "p1";
			p1.SqlType = new Int16SqlType();
			p2.Name = "p2";
			p2.SqlType = new Int16SqlType();
			/*
			 * "select * from (select row_number() over(orderby_clause) as rownum, "
			 * querySqlString_without select
			 * " ) as tempresult where rownum between ? and ?"
			 */
			SqlStringBuilder pagingBuilder = new SqlStringBuilder();
			bool isInOrderBy = false;
			StringBuilder orderByStringBuilder = new StringBuilder();

			// build a new query and extract the order by part
			foreach( object sqlPart in querySqlString.SqlParts )
			{
				string sqlPartString = sqlPart as string;
				if( sqlPartString != null )
				{
					if( sqlPartString.ToLower().TrimStart().StartsWith( "order by" ) )
					{
						isInOrderBy = true;
					}
				}

				if( isInOrderBy && sqlPart is string )
				{
					orderByStringBuilder.Append( ( string ) sqlPart );
				}
				else
				{
					pagingBuilder.AddObject( sqlPart );
				}
			}

			string rownumClause = "rownumber() over(" + orderByStringBuilder.ToString() + ") as rownum, ";
			// Add the rownum clause first, right after the original select
			pagingBuilder.Insert( 1, rownumClause );
			// Add the rest
			pagingBuilder.Insert( 0, "select * from (" );
			pagingBuilder.Add( ") as tempresult " );
			// Add the where clause
			pagingBuilder.Add( " where rownum between " );
			pagingBuilder.Add( p1 );
			pagingBuilder.Add( " and " );
			pagingBuilder.Add( p2 );

			return pagingBuilder.ToSqlString();
		}
	}
}