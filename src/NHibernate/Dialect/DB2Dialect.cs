using System;
using System.Data;

namespace NHibernate.Dialect {

	/// <summary>
	/// An SQL dialect for DB2.
	/// </summary>
	public class DB2Dialect : Dialect {

		public DB2Dialect() {
			/* Type mapping in Java was:
			
			Types.BIT, "SMALLINT"
			Types.BIGINT, "BIGINT"
			Types.SMALLINT, "SMALLINT"
			Types.TINYINT, "SMALLINT"
			Types.INTEGER, "INTEGER"
			Types.CHAR, "CHAR(1)"
			Types.VARCHAR, "VARCHAR($l)"
			Types.FLOAT, "FLOAT"
			Types.DOUBLE, "DOUBLE"
			Types.DATE, "DATE"
			Types.TIME, "TIME"
			Types.TIMESTAMP, "TIMESTAMP"
			Types.VARBINARY, "VARCHAR($l) FOR BIT DATA"
			Types.NUMERIC, "NUMERIC(19, $l)"
			Types.BLOB, "BLOB($l)"
			Types.CLOB, "CLOB($l)"
			*/			

			Register( DbType.Bit, "SMALLINT" );
			Register( DbType.BigInt, "BIGINT" );
			Register( DbType.SmallInt, "SMALLINT" );
			Register( DbType.Int16, "SMALLINT" );
			Register( DbType.Int32, "INTEGER" );
			Register( DbType.AnsiStringFixedLength, "VARCHAR($l)" );
			Register( DbType.Float, "FLOAT" );
			Register( DbType.Real, "DOUBLE" );
			Register( DbType.DateTime, "DATE" );
			// register( Types.TIME, "TIME" );  ???
			Register( DbType.Timestamp, "TIMESTAMP" );
			Register( DbType.VarBinary, "VARCHAR($l) FOR BIT DATA" );
			Register( DbType.Decimal, "NUMERIC(19, $l)" );
			Register( DbType.Image, "BLOB($l)" );
			Register( DbType.Text, "CLOB($l)" );
		
			/*
			getDefaultProperties().setProperty(Environment.OUTER_JOIN, "true");
			getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
			*/
		}
		
		public override string AddColumnString {
			get { return "add column"; }
		}
		public override bool DropConstraints {
			get { return false; }
		}
		public override bool SupportsIdentityColumns {
			get { return true; }
		}
		public override string IdentitySelectString {
			get { return "values IDENTITY_VAL_LOCAL()"; }
		}
		public override string IdentityColumnString {
			get { return "not null generated by default as identity"; }
		}
		public override string IdentityInsertString {
			get { return "default"; }
		}
		
		public override string GetSequenceNextValString(string sequenceName) {
			return "values nextval for " + sequenceName;
		}
		public override string GetCreateSequenceString(string sequenceName) {
			return "create sequence " + sequenceName;
		}
		public override string GetDropSequenceString(string sequenceName) {
			return string.Concat( "drop sequence ", sequenceName, " restrict" );
		}
		
		public override bool SupportsSequences {
			get { return true; }
		}
	}
}