<!-- 
	before committing make sure to comment out the DOCTYPE
	It is in here to get intellisense with XMLSpy.  The
	HomeEdition is a free download.

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "../../support/docbook-dtd/docbookx.dtd">
-->
<chapter id="architecture">

	<title>Architecture</title>

	<sect1 id="architecture-overview">
		<title>Overview</title>
	    
		<para>
			A (very) high-level view of the NHibernate architecture:
		</para>
		
		<mediaobject>
			<!--
			<imageobject role="fo">
				<imagedata fileref="../images/overview.svg" format="SVG" align="center"/>
			</imageobject>
			-->
			<imageobject role="html">
				<imagedata fileref="overview.gif" format="GIF" align="center"/>
			</imageobject>
		</mediaobject>
		<para>
			This diagram shows NHibernate using the database and configuration data to
			provide persistence services (and persistent objects) to the application.
		</para>

		<para>
			We would like to show a more detailed view of the runtime architecture.
			Unfortunately, NHibernate is flexible and supports several approaches. We will
			show the two extremes. The "lite" architecture has the application
			provide its own ADO.NET connections and manage its own transactions. This approach
			uses a minimal subset of NHibernate's APIs:
		</para>
		
		<mediaobject>
			<!--
			<imageobject role="fo">
				<imagedata fileref="../images/lite.svg" format="SVG" align="center"/>
			</imageobject>
			-->
			<imageobject role="html">
				<imagedata fileref="lite.gif" format="GIF" align="center"/>
			</imageobject>
		</mediaobject>
	    
		<para>
			The "full cream" architecture abstracts the application away from the
			underlying ADO.NET API and lets NHibernate take care of the details.
		</para>

		<!-- TODO: make images -->
		<mediaobject>
			<!--
			<imageobject role="fo">
				<imagedata fileref="../images/full_cream.svg" format="SVG" align="center"/>
			</imageobject>
			-->
			<imageobject role="html">
				<imagedata fileref="full_cream.gif" format="GIF" align="center"/>
			</imageobject>
		</mediaobject>

		<para>
			Heres some definitions of the objects in the diagrams:

			<variablelist>
				<varlistentry>
					<term>SessionFactory (<literal>NHibernate.ISessionFactory</literal>)</term>
					<listitem>
						<para>
							A threadsafe (immutable) cache of compiled mappings for a single database.
							A factory for <literal>Session</literal> and a client of
							<literal>ConnectionProvider</literal>. Might hold an optional (second-level)
							cache of data that is reusable between transactions, at a
							process- or cluster-level.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Session (<literal>NHibernate.ISession</literal>)</term>
					<listitem>
						<para>
							A single-threaded, short-lived object representing a conversation between
							the application and the persistent store. Wraps an ADO.NET connection. Factory
							for <literal>Transaction</literal>. Holds a mandatory (first-level) cache
							of persistent objects, used when navigating the object graph or looking up
							objects by identifier.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Persistent Objects and Collections</term>
					<listitem>
						<para>
							Short-lived, single threaded objects containing persistent state and business
							function. These might be ordinary objects, the only special thing about
							them is that they are currently associated with (exactly one)
							<literal>Session</literal>. As soon as the <literal>Session</literal> is closed,
							they will be detached and free to use in any application layer (e.g. directly
							as data transfer objects to and from presentation).
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Transient Objects and Collections</term>
					<listitem>
						<para>
							Instances of persistent classes that are not currently associated with a
							<literal>Session</literal>. They may have been instantiated by
							the application and not (yet) persisted or they may have been instantiated by a
							closed <literal>Session</literal>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Transaction (<literal>NHibernate.ITransaction</literal>)</term>
					<listitem>
						<para>
							(Optional) A single-threaded, short-lived object used by the application to
							specify atomic units of work. Abstracts application from underlying ADO.NET 
							transaction. A <literal>Session</literal> might span several
							<literal>Transaction</literal>s in some cases.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>ConnectionProvider (<literal>NHibernate.Connection.ConnectionProvider</literal>)</term>
					<listitem>
						<para>
							(Optional) A factory for ADO.NET connections. Abstracts application from
							underlying <literal>IDbConnection</literal>. Not exposed to application, 
							but can be extended/implemented by the developer.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>TransactionFactory (<literal>net.sf.hibernate.TransactionFactory</literal>)</term>
					<listitem>
						<para>
							(Optional) A factory for <literal>Transaction</literal> instances. Not exposed to the
							application, but can be extended/implemented by the developer.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</para>

		<para>
			Given a "lite" architecture, the application bypasses the
			<literal>Transaction</literal>/<literal>TransactionFactory</literal> and/or
			<literal>ConnectionProvider</literal> APIs to talk to ADO.NET directly.
		</para>
	</sect1>
</chapter>

