<!-- 
	before committing make sure to comment out the DOCTYPE
	It is in here to get intellisense with XMLSpy.  The
	HomeEdition is a free download.

-->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "../../support/docbook-dtd/docbookx.dtd">
  
<chapter id="persistent-classes">

	<title>Persistent Classes</title>
	<para>
		Persistent classes are classes in an application that implement the entitites
		of the business problem (ie - Customer and Order in an eCommerce application).
		Persistent classes have, as the name implies, transient and also persistent
		instances stored in the database.
	</para>
	<para>
		NHibernate works best if these classes follow some simple rules, also known
		as the Plain Old CLR Object (POCO) programming model.  
	</para>
	
	<sect1 id="persistent-classes-poco">
		<title>A simple POCO example</title>
		
		<para>
			A simple example using a class to represent a Cat.
		</para>
		<programlisting><![CDATA[public class Cat
{
	private long _id; // identifier
	private string _name;
	private DateTime _birthdate;
	private Cat _mate;
	private Set _kittens;
	private Color _color;
	private char _sex;
	private float _weight;

	public long Id
	{
		get { return _id; }
		set { _id = value; }
	}

	public string Name
	{
		get { return _name; }
		set { _name = value; }
	}

	public DateTime Birthdate
	{
		get { return _birthdate; }
		set { _birthdate = value; }
	}

	public Cat Mate
	{
		get { return _mate; }
		set { _mate = value; }
	}

	public Set Kittens
	{
		get { return _kittens; }
		set { _kittens = value; }
	}

	public Color Color
	{
		get { return _color; }
		set { _color = value; }
	}

	public char Sex
	{
		get { return _sex; }
		set { _sex = value; }
	}

	public float Weight
	{
		get { return _weight; }
		set { _weight = value; }
	}

}
]]></programlisting>
		<para>
			There are four main rules to follow here:
		</para>
		<sect2 id="persistent-classes-poco-accessors">
			<title>Declare getters and setters for persistent fields (optional)</title>
			<para>
				<literal>Cat</literal> declares property getters and setters for all its persistent fields.
				It is good practice to use getters and setters instead of direct access to fields.  However,
				it is possible to use NHibernate with fields instead of properties.
			</para>
			<para>
				Properties do <emphasis>not</emphasis> need to be declared as public - NHibernate can
				persist a property with a default, <literal>procted</literal>, <literal>internal</literal>,
				or <literal>private</literal> visibility.
			</para>
		</sect2>
		<sect2 id="persistent-classes-poco-constructor">
			<title>Implement a default constructor</title>
			<para>
				<literal>Cat</literal> has an implicit default (no argument) constructor.  All
				persistent classes must have a default construction (which may be non-public) so
				NHibernate can instantiate them using <literal>Constructor.Invoke()</literal>.
			</para>
		</sect2>
		<sect2 id="persistent-classes-poco-identifier">
			<title>Provide an identifier property (optional)</title>
			<para></para>
		</sect2>
		<sect2 id="persistent-classes-poco-sealed">
			<title>Prefer non-sealed classes (optional)</title>
			<para></para>
		</sect2>
	</sect1>
	<sect1 id="persistent-classes-inheritance">
		<title>Implementing inheritence</title>
		<para></para>
	</sect1>
	<sect1 id="persistent-classes-equalshashcode">
		<title>Implementing <literal>Equals()</literal> and <literal>GetHashCode()</literal></title>
		<para></para>
	</sect1>
	<sect1 id="persistent-classes-lifecycle">
		<title>Lifecycle Callbacks</title>
		<para></para>
	</sect1>
	<sect1 id="persistent-classes-validatable">
		<title>Validatable callback</title>
		<para></para>
	</sect1>
	<sect1 id="persistent-classes-attribute">
		<title>Using Attributes instead of XML</title>
		<para></para>
	</sect1>
</chapter>