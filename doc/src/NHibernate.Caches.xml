<!-- <!DOCTYPE chapter SYSTEM "../docbook-xml/docbookx.dtd"> -->
<chapter id="NHibernate.Caches">
	<title>NHibernate.Caches</title>


	<abstract id="NHibernate.Caches-abstract">
		<title>What is NHibernate.Caches?</title>
		<formalpara>
			<title>NHibernate.Caches are add-ins for <ulink url="http://www.nhibernate.org">NHibernate</ulink> contributed by Kevin Williams (aka <emphasis>k-dub</emphasis>)</title>
			<para>A cache is place where entities are kept (at their first loading); once in cache, they can be retrieved without having to query them (again) in the back-end storage. This means that they are faster to (re)load.</para>
		</formalpara>
		<para>An NHibernate session has an internal (first-level) cache where it keeps its entities. There is no share between these caches; so a session is destroyed with its cache. NHibernate provides a <emphasis>second-level cache</emphasis> system; it works at the SessionFactory level. So it is shared by all sessions created by the same SessionFactory.</para>
		<para>An important point is that the second-level cache <emphasis role="strong">does not</emphasis> cache instances of the object type being cached; instead it caches the individual values of the properties of that object. This provides two benefits. One, NHibernate doesn't have to worry that your client code will manipulate the objects in a way that will disrupt the cache. Two, the relationships and associations do not become stale, and are easy to keep up-to-date because they are simply identifiers. The cache is not a tree of objects but rather a map of arrays.</para>
		<para>With the <emphasis>session-per-request</emphasis> model, a high number of Session can concurrently access to the same entity without hitting the database each time; hence the performance gain.</para>
		<para>These contributions make it possible to use different cache providers for NHibernate:
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="strong">NHibernate.Caches.Prevalence</emphasis> makes it possible to use the underlying <classname>Bamboo.Prevalence</classname> implementation as cache provider. Open the file <filename>Bamboo.Prevalence.license.txt</filename> for more information about its license; you can also visit its <ulink url="http://bbooprevalence.sourceforge.net/">website</ulink>.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="strong">NHibernate.Caches.SysCache</emphasis> makes it possible to use the underlying <classname>System.Web.Caching.Cache</classname> implementation as cache provider. This means that you can rely on ASP.NET caching feature to understand how it works. For more information, read (on the MSDN): <ulink url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconcacheapis.asp">Caching Application Data</ulink>.</para>
				</listitem>
			</itemizedlist>
		</para>
	</abstract>


	<section id="NHibernate.Caches-howto">
		<title>How to use them?</title>
		<para>Here are the steps to follow to enable the second-level cache in NHibernate:</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>Choose the cache provider you want to use and copy its assembly in your assemblies directory (<filename>NHibernate.Caches.Prevalence.dll</filename> or <filename>NHibernate.Caches.SysCache.dll</filename>).</para>
				</listitem>
				<listitem>
					<para>To tells which cache provider to use, add in your NHibernate configuration file (can be <filename>YourAssembly.exe.config</filename> or <filename>web.config</filename> or a <filename>.cfg.xml</filename> file):
					<programlisting>
&lt;add key="hibernate.cache.provider_class" value="<literal>XXX</literal>" /&gt;<co id="hibernate.cache.provider_class-co" linkends="hibernate.cache.provider_class"/>
&lt;add key="relativeExpiration" value="<literal>120</literal>" /&gt;<co id="nhcaches-relativeExpiration-co" linkends="nhcaches-relativeExpiration"/>
						</programlisting>
						<calloutlist>
							<callout arearefs="hibernate.cache.provider_class-co" id="hibernate.cache.provider_class">
								<para>"<literal>XXX</literal>" can either be "<classname>NHibernate.Caches.Prevalence.PrevalenceCacheProvider, NHibernate.Caches.Prevalence</classname>" or "<classname>NHibernate.Caches.SysCache.SysCacheProvider, NHibernate.Caches.SysCache</classname>".</para>
							</callout>
							<callout arearefs="nhcaches-relativeExpiration-co" id="nhcaches-relativeExpiration">
								<para>The <literal>relativeExpiration</literal> value is the number of seconds you wish to cache each entry (here two minutes). This example applies to SysCache only.</para>
							</callout>
						</calloutlist>
					</para>
				</listitem>
				<listitem>
					<para>Add <emphasis role="strong">&lt;cache usage="read-write|nonstrict-read-write|read-only"/&gt;</emphasis> (just after <emphasis>&lt;class&gt;</emphasis>) in the mapping of the entities you want to cache. It also works for collections (bag, list, map, set, ...).</para>
				</listitem>
			</itemizedlist>
		</para>
		<formalpara>
			<title>Be careful</title>
			<para>Caches are never aware of changes made to the persistent store by another process (though they may be configured to regularly expire cached data). As the caches are created at the SessionFactory level, they are destroyed with the SessionFactory instance; so you must keep it alive as long as you need them.</para>
		</formalpara>
	</section>

	<section id="NHibernate.Caches.Prevalence">
		<title>Prevalence Cache Configuration</title>
		<para>There is only one configurable parameter: prevalenceBase. This is the directory on the file system where the Prevalence engine will save data. It can be relative to the current directory or a full path. If the directory doesn't exist, it will be created.</para>
	</section>

	<section id="NHibernate.Caches.SysCache">
		<title>SysCache Configuration</title>
		<para>As the SysCache relies on <classname>System.Web.Caching.Cache</classname> for the underlying implementation, the configuration is based on the available options that make sense for NHibernate to utilize.</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>staticExpiration = a specific DateTime to expire each item on</para>
				</listitem>
				<listitem>
					<para>relativeExpiration = number of seconds to wait before expiring each item</para>
				</listitem>
				<listitem>
					<para>priority = a numeric cost of expiring each item, where 1 is a low cost, 5 is the highest, and 3 is normal. Only values 1 through 5 are valid.</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>SysCache has a config file section handler to allow configuring different expirations and priorities for different regions. Here's an example:</para>
		<programlisting><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="syscache" type="NHibernate.Caches.SysCache.SysCacheSectionHandler,NHibernate.Caches.SysCache" />
		<section name="nhibernate" type="System.Configuration.NameValueSectionHandler, System, Version=1.0.5000.0,Culture=neutral, PublicKeyToken=b77a5c561934e089" />
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net" />
	</configSections>

	<syscache>
		<cache region="foo" relativeExpiration="500" priority="4" />
		<cache region="bar" staticExpiration="2100-12-31" />
	</syscache>
	<nhibernate>
		<add key="hibernate.connection.provider" value="NHibernate.Connection.DriverConnectionProvider" />
		<add key="hibernate.connection.isolation" value="ReadCommitted" />
		<add key="hibernate.dialect" value="NHibernate.Dialect.MsSql2000Dialect" />
		<add key="hibernate.connection.driver_class" value="NHibernate.Driver.SqlClientDriver" />
		<add key="hibernate.connection.connection_string"  value="Server=localhost;initial catalog=nhibernate;Integrated Security=SSPI" />
		<add key="hibernate.cache.provider_class" value="NHibernate.Caches.SysCache.SysCacheProvider,NHibernate.Caches.SysCache" />
	</nhibernate>
	<log4net debug="true"><appender name="rollingFile" type="log4net.Appender.RollingFileAppender,log4net" >
			<param name="File" value="log.txt" />
			<param name="AppendToFile" value="true" />
			<param name="RollingStyle" value="Date" />
			<param name="DatePattern" value="yyyy.MM.dd" />
			<param name="StaticLogFileName" value="true" />
			<layout type="log4net.Layout.PatternLayout,log4net">
				<param name="ConversionPattern" value="%d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n" />
			</layout>
		</appender>
		<root>
			<priority value="ALL" />
			<appender-ref ref="rollingFile" />
		</root>
	</log4net>
</configuration>]]>
		</programlisting>
	</section>


	<!--

	<section id="NHibernate.Caches-tips">
		<title>Tips</title>
		<itemizedlist>
			<listitem><para>!</para></listitem>
		</itemizedlist>
	</section>


	<section id="NHibernate.Caches-todo">
		<title>Know issues and TODOs</title>
		<para>Read TODOs in the source code ;)</para>
		<para>!</para>
	</section>


	<section id="NHibernate.Caches-devnotes">
		<title>Developer Notes</title>
		<para>!</para>
	</section>

-->


</chapter>
