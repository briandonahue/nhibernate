//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//     Runtime Version: $runtimeversion
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
${classimports}
${javaTool.getPackageDeclaration($clazz)}
{
	/// <summary>
	/// POJO for $clazz.generatedName. This class is autogenerated
	/// </summary>
#if($clazz.hasMeta("class-description"))
	/// <remarks>
	/// $javaTool.toJavaDoc($clazz.getMetaAsString("class-description"),0)
	/// </remarks>
#end
	[Serializable]
	$clazz.scope $clazz.modifiers $clazz.declarationType $clazz.generatedName#if(($javaTool.hasExtends($clazz))||($javaTool.hasImplements($clazz))) : #end$javaTool.getExtends($clazz)#if(($javaTool.hasExtends($clazz))&&($javaTool.hasImplements($clazz))), #end$javaTool.getImplements($clazz)
	{
#if(!$clazz.isInterface())
		#region Fields
		
#foreach($field in $clazz.Fields())  
		$field.FieldScope() $field.FullyQualifiedTypeName $field.fieldcase;
#end

		#endregion

		#region Constructors
		
#if($clazz.AllFieldsForFullConstructor().Count>0)
		/// <summary>
		/// Initializes a new instance of the ${clazz.generatedName} class
		/// </summary>
		public ${clazz.generatedName}()
		{
		}
#end
	
		/// <summary>
		/// Initializes a new instance of the ${clazz.generatedName} class
		/// </summary>
#foreach($field in $clazz.AllFieldsForFullConstructor())  
		/// <param name="${field.fieldcase}">Initial <see cref="${clazz.generatedName}.${field.fieldName}" /> value</param>
#end
		public ${clazz.generatedName}($javaTool.fieldsAsParameters($clazz.AllFieldsForFullConstructor(),$clazz,$class2classmap))
#if(!$clazz.FieldsForSupersFullConstructor().isEmpty()) 
				: base($javaTool.fieldsAsArguments($clazz.FieldsForSupersFullConstructor(),$clazz,$class2classmap))
#end
		{
#foreach($field in $clazz.LocalFieldsForFullConstructor())  
			this.$field.fieldcase = $field.fieldcase;
#end
		}
	
#if(($clazz.AllFieldsForFullConstructor().Count > 0) && $clazz.needsMinimalConstructor())
		/// <summary>
		/// Minimal constructor for class ${clazz.generatedName}
		/// </summary>
#foreach($field in $clazz.AllFieldsForMinimalConstructor())  
		/// <param name="${field.fieldcase}">Initial <see cref="${clazz.generatedName}.${field.fieldName}" /> value</param>
#end
		public ${clazz.generatedName}($javaTool.fieldsAsParameters($clazz.AllFieldsForMinimalConstructor(),$clazz,$class2classmap))
#if(!${clazz.FieldsForSupersMinimalConstructor().isEmpty()}) 
				: base($javaTool.fieldsAsArguments($clazz.FieldsForSupersMinimalConstructor(),$clazz,$class2classmap))
#end
		{
#foreach($field in $clazz.LocalFieldsForMinimalConstructor())  
			this.$field.fieldcase = $field.fieldcase;
#end
		}
#end
		#endregion
	
		#region Properties
		
#foreach($field in $clazz.Fields())
		/// <summary>
		/// Gets or sets the ${field.fieldName} for the current ${clazz.generatedName}
		/// </summary>
#if($property.hasMeta("field-description"))
		/// <remarks>
		/// $javaTool.toJavaDoc($clazz.getMetaAsString("field-description"),4)
		/// <remarks>
#end
		$field.PropertyGetScope() $field.FullyQualifiedTypeName $field.propcase
		{
			get { return this.$field.fieldcase; }
			set { this.$field.fieldcase = value; }
		}
		
#end
		#endregion
#else
		#region Properties
	
#foreach($field in $clazz.getFields())
		/// <summary>
		/// Gets or sets the ${field.fieldName} for the current ${clazz.generatedName}
		/// </summary>
#if($property.hasMeta("field-description"))
		/// <remarks>
		/// $javaTool.toJavaDoc($clazz.getMetaAsString("field-description"),4)
		/// <remarks>
#end
		$field.PropertyGetScope() $field.FullyQualifiedTypeName $field.propcase
		{
			get;
			set;
		}
		
#end
		#endregion
#end
	}
}