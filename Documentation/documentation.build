<?xml version="1.0" ?>
<project 
	name="doc" 
	default="build" 
	xmlns="http://nant.sf.net/release/0.85-rc3/nant.xsd"
>
	<property name="project.version.major" value="1" overwrite="false" />
	<property name="project.version.minor" value="0" overwrite="false" />
	<property name="project.version.build" value="0" overwrite="false" />
	<property name="project.version.revision" value="0" overwrite="false" />
	<property name="project.version" value="${project.version.major}.${project.version.minor}.${project.version.build}.${project.version.revision}" />

	<!--
		if Visual Studio Help Integration Kit has been installed
		then change this to true or include -D:vshik.installed=true in the command line.
		It generates Visual Studio.NET 2003 documentation.
	-->
	<property name="vshik.installed" value="false" overwrite="false" />

	<!--
		The path to the VSHIK executable files. If VSHIK is installed in a different path, then
		specify the path in the command line using -D:vshik.path=<path>
	-->
	<property name="vshik.path" value="${environment::get-folder-path('ProgramFiles')}\Microsoft Help 2.0 SDK" overwrite="false" />

	<property name="lang" value="en" overwrite="false" />

	<property name="output.dir" value="build" overwrite="false" />

	<tstamp property="build.date" pattern="u" verbose="true" />


	<target name="init" unless="${target::has-executed('init')}" description="Set the documentation version and the date of generation.">
		<copy file="src/Documentation.xml" tofile="src/Documentation.gen" overwrite="true" />
		<!--
			Modify the file "Documentation.gen" instead of the .xml one because:
			- We don't have to remove these changes after building
				And it would be hard because the build can fail...
			- When doing <xmlpoke>, NAnt also change the layout of the xml file.
		-->
		<xmlpoke
			file="src/Documentation.gen"
			xpath="/book/bookinfo/title"
			value="NHibernate Documentation ${project.version}"
		/>
		<xmlpoke
			file="src/Documentation.gen"
			xpath="/book/bookinfo/releaseinfo"
			value="Status: Production/Stable. Built Date: ${build.date}."
		/>
	</target>


	<target name="clean" description="Cleans any previous builds">
		<delete dir="${output.dir}" failonerror="false" />
	</target>



	<target name="build" depends="init" description="Generates the documentation in multiple formats from the docbook files.">
		<call target="build-html" />
		<call target="build-chm" />
		<call target="build-help2" />
	</target>



	<target name="build-html" depends="init" description="Generates html from docbook files.">

		<property name="build.html.dir" value="${output.dir}" />
		<property name="build.single.dir" value="${build.html.dir}" />
		<property name="build.chunk.dir" value="${build.html.dir}/html" />

		<mkdir dir="${build.html.dir}" failonerror="false" />
		<mkdir dir="${build.single.dir}" failonerror="false" />
		<mkdir dir="${build.chunk.dir}" failonerror="false" />

		<exec program="xsltproc" >
			<arg value="--output" />
			<arg file="${build.single.dir}/NHibernate.Documentation.html" /><!-- file to output transform results to -->
			<arg file="html_single.xsl" /><!-- xsl to do the transforming -->
			<arg file="src/Documentation.gen" /><!-- xml file to transform -->
		</exec>

		<exec program="xsltproc" >
			<arg value="--output" />
			<arg path="${build.chunk.dir}/" /><!-- dir to output transform results to (add the trailing '/' for xsltproc) -->
			<arg file="html_chunk.xsl" /><!-- xsl to do the transforming -->
			<arg file="src/Documentation.gen" /><!-- xml file to transform -->
		</exec>

		<!-- Copy the images and the stylesheet -->
		<copy todir="${build.single.dir}/NHibernate.Documentation_files/" overwrite="true" >
			<fileset basedir="src/Images/"><include name="*" /></fileset>
		</copy>
		<copy todir="${build.chunk.dir}" overwrite="true" >
			<fileset basedir="src/Images/"><include name="*" /></fileset>
		</copy>
		<copy todir="${build.single.dir}/NHibernate.Documentation_files/" overwrite="true" >
			<fileset basedir="src/"><include name="style.css" /></fileset>
		</copy>
		<copy todir="${build.chunk.dir}" overwrite="true" >
			<fileset basedir="src/"><include name="style.css" /></fileset>
		</copy>
	</target>



	<target name="build-chm" depends="init" description="Generates chm file from docbook files." unless="${target::has-executed('build-chm')}">
		
		<!-- default install location -->
		<property name="hhc.exe" value="${environment::get-folder-path('ProgramFiles')}\HTML Help Workshop\hhc" />
		<property name="build.chm.dir" value="${output.dir}/chm" />

		<mkdir dir="${build.chm.dir}" failonerror="false" />

		<!-- make the htmlhelp version of the helpfile -->
		<exec program="xsltproc">
			<arg value="--output" />
			<arg path="${build.chm.dir}/" /><!-- dir to output transform results to (add the trailing '/' for xsltproc) -->
			<arg file="chm_help.xsl" /> <!-- xsl to do the transforming -->
			<arg file="src/Documentation.gen" /> <!-- xml file to transform -->
		</exec>

		<!-- Copy the images and the stylesheet -->
		<copy todir="${build.chm.dir}" overwrite="true" >
			<fileset basedir="src/Images/"><include name="*" /></fileset>
		</copy>
		<copy todir="${build.chm.dir}" overwrite="true" >
			<fileset basedir="src/"><include name="style.css" /></fileset>
		</copy>

		<!-- TODO: Don't know why its return code is 1 (stop NAnt, if failonerror="true") -->
		<exec program="${hhc.exe}" failonerror="false">
			<arg file="${build.chm.dir}/htmlhelp.hhp" />
		</exec>

		<copy file="${build.chm.dir}/htmlhelp.chm" tofile="${output.dir}/NHibernate.Documentation.chm" />
		<delete dir="${build.chm.dir}" />
	</target>



	<target name="build-help2" if="${vshik.installed}" depends="build-chm" description="Generates help2 file from chm file.">
		<property name="build.help2.dir" value="${output.dir}/help2" />
		
		<!-- convert the chm into the HxC -->
		<exec program="HxConv.exe" basedir="${vshik.path}">
			<arg path="${output.dir}/NHibernate.Documentation.chm" />
			<arg value="-o" />
			<arg path="${build.help2.dir}" />
			<arg value="-y" />
		</exec>

		<!--
			Compile the HxC into an HxS that can be included
			in a Help2 collection 
		-->
		<exec program="HxComp.exe" basedir="${vshik.path}">
			<arg value="-p" />
			<arg path="${build.help2.dir}/NHibernate.Documentation.HxC" />
			<arg value="-o" />
			<arg path="${output.dir}/NHibernate.Documentation.HxS" />
		</exec>
		<delete dir="${build.help2.dir}" />

		<!--
			copying the Help2 files from cvs that describe the
			Help collection, not the files generated by the build
			that contain the content
		-->
		<copy todir="${output.dir}" overwrite="true" >
			<fileset basedir="Help2/">
				<include name="*" />
			</fileset>
		</copy>
	</target>
</project>

