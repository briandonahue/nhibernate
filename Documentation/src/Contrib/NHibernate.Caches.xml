<!-- <!DOCTYPE chapter SYSTEM "../../docbook-xml/docbookx.dtd"> -->
<chapter id="NHibernate.Caches">
	<title>NHibernate.Caches</title>


	<abstract id="NHibernate.Caches-abstract">
		<title>What is NHibernate.Caches?</title>
		<formalpara>
			<title>NHibernate.Caches are add-ins for <ulink url="http://www.nhibernate.org">NHibernate</ulink> contributed by Kevin Williams (aka <emphasis>k-dub</emphasis>)</title>
			<para>A cache is place where entities are kept (at their first loading); once in cache, they can be retrieved without having to query them (again) in the back-end storage. This means that they are faster to (re)load.</para>
		</formalpara>
		<para>An NHibernate session has an internal (first-level) cache where it keeps its entities. There is no share between these caches; so a session is destroyed with its cache. NHibernate provides a <emphasis>second-level cache</emphasis> system; it works at the SessionFactory level. So it is shared by all sessions created by the same SessionFactory.</para>
		<para>With the <emphasis>session-per-request</emphasis> model, a high number of Session can concurrently access to the same entity without hitting the database each time; hence the performance gain.</para>
		<para>These contributions make it possible to use different cache providers for NHibernate:
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="strong">NHibernate.Caches.Prevalence</emphasis> makes it possible to use the underlaying <classname>Bamboo.Prevalence</classname> implementation as cache provider. Open the file <filename>Bamboo.Prevalence.license.txt</filename> for more information about its license; you can also visit its <ulink url="http://bbooprevalence.sourceforge.net/">website</ulink>.</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="strong">NHibernate.Caches.SysCache</emphasis> makes it possible to use the underlaying <classname>System.Web.Caching.Cache</classname> implementation as cache provider. This means that you can rely on ASP.NET caching feature to understand how it works. For more information, read (on the MSDN): <ulink url="http://msdn.microsoft.com/library/en-us/cpguide/html/cpconcacheapis.asp">Caching Application Data</ulink>.</para>
				</listitem>
			</itemizedlist>
		</para>
	</abstract>


	<section id="NHibernate.Caches-howto">
		<title>How to use them?</title>
		<para>Here are the steps to follow to enable the second-level cache in NHibernate:</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>Choose the cache provider you want to use and copy its assembly in your assemblies directory (<filename>NHibernate.Caches.Prevalence.dll</filename> or <filename>NHibernate.Caches.SysCache.dll</filename>).</para>
				</listitem>
				<listitem>
					<para>To tells which cache provider to use, add in your NHibernate configuration file (can be <filename>YourAssembly.exe.config</filename> or <filename>web.config</filename> or a <filename>.cfg.xml</filename> file):
					<programlisting>
&lt;add key="hibernate.cache.provider_class" value="<literal>XXX</literal>" /&gt;<co id="hibernate.cache.provider_class-co" linkends="hibernate.cache.provider_class"/>
&lt;add key="relativeExpiration" value="<literal>120</literal>" /&gt;<co id="nhcaches-relativeExpiration-co" linkends="nhcaches-relativeExpiration"/>
						</programlisting>
						<calloutlist>
							<callout arearefs="hibernate.cache.provider_class-co" id="hibernate.cache.provider_class">
								<para>"<literal>XXX</literal>" can either be "<classname>NHibernate.Caches.Prevalence.PrevalenceCacheProvider, NHibernate.Caches.Prevalence</classname>" or "<classname>NHibernate.Caches.SysCache.SysCacheProvider, NHibernate.Caches.SysCache</classname>".</para>
							</callout>
							<callout arearefs="nhcaches-relativeExpiration-co" id="nhcaches-relativeExpiration">
								<para>The <literal>relativeExpiration</literal> value is the number of seconds you wish to cache each entry (here two minutes).</para>
							</callout>
						</calloutlist>
					</para>
				</listitem>
				<listitem>
					<para>Add <emphasis role="strong">&lt;cache usage="read-write|nonstrict-read-write|read-only"/&gt;</emphasis> (just after <emphasis>&lt;class&gt;</emphasis>) in the mapping of the entities you want to cache. It also works for collections (bag, list, map, set, ...).</para>
				</listitem>
			</itemizedlist>
		</para>
		<caution>
			<title>Be careful</title>
			<para>Caches are never aware of changes made to the persistent store by another process (though they may be configured to regularly expire cached data). And as these caches are created at the SessionFactory level, they are destroyed with the SessionFactory instance; so you must keep it alive as long as you need them.</para>
		</caution>
	</section>


	<!--

	<section id="NHibernate.Caches-tips">
		<title>Tips</title>
		<itemizedlist>
			<listitem><para>!</para></listitem>
		</itemizedlist>
	</section>


	<section id="NHibernate.Caches-todo">
		<title>Know issues and TODOs</title>
		<para>Read TODOs in the source code ;)</para>
		<para>!</para>
	</section>


	<section id="NHibernate.Caches-devnotes">
		<title>Developer Notes</title>
		<para>!</para>
	</section>

-->


</chapter>
