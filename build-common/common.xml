<?xml version="1.0" ?>
<project xmlns="http://nant.sf.net/release/0.85-rc3/nant.xsd">

	<!-- 
		Use this to determine if the key file NHibernate.snk should be used to 
		sign the assemblies. Defaults to true since private key is present
		in CVS.
	-->
	<property name="sign" value="true" overwrite="false" />
	<property name="key.file" value="${root.dir}\src\NHibernate.snk" if="${sign}" />

	<!--
		if Visual Studio Help Integration Kit has been installed
		then change this to true or include -D:vshik.installed=true in the command line.
		It generates Visual Studio.NET 2003 documentation.
	-->
	<property name="vshik.installed" value="false" overwrite="false" />

	<!-- 
		if nunit2report tasks from http://nunit2report.sourceforge.net/ has been installed
		then change this to true.  It generates a nice looking html report for the test files
	-->
	<property name="nunit2report.installed" value="false" overwrite="false" />

	<!--
		Cenqua provided a license of Clover.NET for the NHibernate project to use. 
	-->
	<property name="clover.enabled" value="false" />
	<property name="clover.src" value="src\CloverSrc" />
	<property name="clover.db" value="${clover.src}\clover.cdb" />
	<property name="clover.home" value="${environment::get-folder-path('ProgramFiles')}/Cenqua/Clover.NET for Visual Studio" />
	<property name="clover.assembly" value="CloverNAnt-0.85.dll" />

	<!-- 
		Path to the folder that contain the external assemblies.  For net-1.1 the values will
		be lib, lib/net, and lib/net/1.1 respectively.
	-->
	<property name="lib.dir" value="lib" dynamic="true" />
	<property name="lib.family.dir" value="${path::combine(lib.dir, framework::get-family(framework::get-target-framework()))}" dynamic="true" />
	<property name="lib.framework.dir" value="${path::combine(lib.family.dir, version::to-string(framework::get-version(framework::get-target-framework())))}" dynamic="true" />

	<!-- 
		These are used to set the correct attributes in AssemblyInfo.cs.  
	-->
	<property name="project.company" value="NHibernate.org" />
	<property name="project.version.major" value="1" overwrite="false" />
	<property name="project.version.minor" value="0" overwrite="false" />
	<property name="project.version.build" value="2" overwrite="false" />
	<property name="project.version.revision" value="0" overwrite="false" />
	<property name="project.version" value="${project.version.major}.${project.version.minor}.${project.version.build}.${project.version.revision}" />

	<!-- debug|release -->
	<property name="build.defines" value="STRONG " />

	<!-- platform specific properties. These are the defaults -->
	<property name="current.build.defines" value="${build.defines}" />

	<!-- properties used to connect to database for testing -->
	<property name="nhibernate.dialect" value="NHibernate.Dialect.MsSql2000Dialect" />
	<property name="nhibernate.connection.driver_class" value="NHibernate.Driver.SqlClientDriver" />
	<property name="nhibernate.connection.connection_string" value="Server=(local);initial catalog=nhibernate;Integrated Security=SSPI" />

	<!-- named project configurations -->
	<target name="set-debug-project-configuration" description="Perform a 'debug' build">
		<property name="build.debug" value="true" />
		<property name="build.name" value="NHibernate-${project.version}-${project.config}" />
	</target>
	
	<target name="set-release-project-configuration" description="Perform a 'release' build">
		<property name="build.debug" value="false" />
		<property name="build.name" value="NHibernate-${project.version}" />
	</target>

	<target name="set-project-configuration">
		<property name="project.config" value="debug" overwrite="false" />
		<if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
			<fail message="Unknown configuration: '${project.config}'" />
		</if>

		<call target="set-${project.config}-project-configuration" />

		<property name="build.root.dir" value="${root.dir}/build/${build.name}" />
		<property name="build.dir" value="${build.root.dir}" />
		<property name="bin.dir" value="${build.dir}/bin/${framework::get-target-framework()}" />
	</target>

	<target name="set-framework-configuration">
		<if test="${not(target::exists('set-'+framework::get-target-framework()+'-framework-configuration'))}">
			<fail message="The '${framework::get-target-framework()}' framework is not supported by this version of NHibernate." />
		</if>
		<call target="set-${framework::get-target-framework()}-framework-configuration" />
	</target>

	<target name="set-net-1.1-framework-configuration">
		<property name="nant.settings.currentframework" value="net-1.1" />
		<property name="current.build.defines" value="${build.defines}NET,NET_1_1" />
		<property name="link.sdkdoc.version" value="SDK_v1_1" />
		<property name="merge.targetplatform" value="v1.1" />
	</target>

	<target name="set-net-2.0-framework-configuration">
		<property name="nant.settings.currentframework" value="net-2.0" />
		<property name="current.build.defines" value="${build.defines}NET,NET_2_0" />
		<!-- not using SDK_v2_0 because ndoc throws an exception -->
		<property name="link.sdkdoc.version" value="SDK_v1_1" />
		<property name="merge.targetplatform" value="v2" />
	</target>

	<target name="set-mono-1.0-framework-configuration">
		<property name="nant.settings.currentframework" value="mono-1.0" />
		<property name="current.build.defines" value="${build.defines}MONO,MONO_1_0" />
		<property name="link.sdkdoc.version" value="MsdnOnline" />
	</target>

	<target name="display-current-runtime">
		<echo message="" />
		<echo message="----------------------------------------------------------" />
		<echo message=" ${framework::get-description(framework::get-target-framework())}" />
		<echo message="----------------------------------------------------------" />
		<echo message="" />
		<echo message="framework : ${framework::get-target-framework()}" />
		<echo message="description : ${framework::get-description(framework::get-target-framework())}" />
		<echo message="sdk directory : ${framework::get-sdk-directory(framework::get-target-framework())}" />
		<echo message="framework directory : ${framework::get-framework-directory(framework::get-target-framework())}" />
		<echo message="assembly directory : ${framework::get-assembly-directory(framework::get-target-framework())}" />
		<echo message="runtime engine : ${framework::get-runtime-engine(framework::get-target-framework())}" />
		<echo message="" />
	</target>

	<target name="build-with-clover" description="Builds current config with Clover coverage">
		<!-- 
			mark this as being a clover enabled build and then just let the normal build
			process take place
		-->
		<property name="clover.enabled" value="true" />
	</target>
	
	<target name="build-without-clover" description="Ensures the build is done without Clover coverage">
		<!--
			This does not really need to be called unless the clover.enabled property has been explicitly 
			set to true by some other means since clover.enabled defaults to false.  It is my intention
			to first do a clover build to get the coverage then to do a non-clover build to get the 
			clover-free dlls.
		-->
		<property name="clover.enabled" value="false" />
	</target>

	<target name="common.init"
		depends="set-project-configuration set-framework-configuration"
		description="Initializes build properties">
		
		<resourcefileset id="project.resources" />
	</target>

	<target name="cleanall" description="Deletes every build configuration">
		<echo message="Deleting all builds from all configurations" />
		<delete dir="build" failonerror="false" />
	</target>

	<target name="clean" depends="init" description="Deletes current build">
		<delete dir="${build.dir}" failonerror="false" />
	</target>

	<target name="clean-bin" depends="init" description="Deletes the current bin folder">
		<delete dir="${bin.dir}" failonerror="false" />
	</target>

	<if test="${clover.enabled}">
		<loadtasks assembly="${clover.home}/${clover.assembly}" />
	</if>

</project>
